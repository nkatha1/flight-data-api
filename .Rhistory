library(nycflights13)
library(data.table)
# Load flights dataset from nycflights13
flights_dt <- as.data.table(flights)
# View the first few rows to check
head(flights_dt)
# Calculate the average departure delay for each airline
avg_dep_delay <- flights_dt[, .(avg_dep_delay = mean(dep_delay, na.rm = TRUE)), by = carrier]
print(avg_dep_delay)
# Add a unique flight_id and delayed column
flights_dt[, flight_id := .I]  # Unique id for each row
flights_dt[, delayed := ifelse(dep_delay > 15, TRUE, FALSE)]  # True if delayed more than 15 minutes
# Check the new columns
head(flights_dt)
fwrite(flights_dt, "processed_flights.csv")
conn <- dbConnect(RSQLite::SQLite(), "flights.db")
dbWriteTable(conn, "flights", flights_dt, overwrite = TRUE)
dbDisconnect(conn)
install.packages("RSQLite")
library(RSQLite)
# Create a SQLite connection
conn <- dbConnect(RSQLite::SQLite(), "flights.db")
# Write the data.table to the SQLite database (overwrite existing if it exists)
dbWriteTable(conn, "flights", flights_dt, overwrite = TRUE)
# Close the connection
dbDisconnect(conn)
# Reconnect to the database
conn <- dbConnect(RSQLite::SQLite(), "flights.db")
# Check the tables in the database
tables <- dbListTables(conn)
print(tables)
# Read the "flights" table back into R
flights_from_db <- dbReadTable(conn, "flights")
print(head(flights_from_db))  # View the first few rows
# Close the connection
dbDisconnect(conn)
library(ambiorix)
library(plumber)
library(RSQLite)
library(data.table)
# Load the processed flight data (from SQLite or CSV)
conn <- dbConnect(RSQLite::SQLite(), "flights.db")
flights_dt <- dbReadTable(conn, "flights")
dbDisconnect(conn)
# Create the Plumber API
api <- plumb()
# Create the Plumber API
api <- plumb()  # Empty API object to start with
# Define routes in the R console
# POST /flight - Create a new flight entry
api$POST("/flight", function(req, res) {
  id <- as.integer(req$args$id)
  carrier <- req$args$carrier
  origin <- req$args$origin
  dest <- req$args$dest
  dep_delay <- as.numeric(req$args$dep_delay)
  arr_delay <- as.numeric(req$args$arr_delay)
  new_flight <- data.table(id = id, carrier = carrier, origin = origin, dest = dest, 
                           dep_delay = dep_delay, arr_delay = arr_delay)
  flights_dt <<- rbind(flights_dt, new_flight)
  conn <- dbConnect(RSQLite::SQLite(), "flights.db")
  dbWriteTable(conn, "flights", flights_dt, overwrite = TRUE)
  dbDisconnect(conn)
  return(list(message = "Flight added successfully."))
})
# GET /flight/:id - Get flight details by ID
api$GET("/flight/{id}", function(req, res) {
  flight_id <- as.integer(req$args$id)
  flight <- flights_dt[flight_id == id]
  if (nrow(flight) == 0) {
    res$status <- 404
    return(list(message = "Flight not found."))
  }
  return(flight)
})
# Start the API
api$run(host = "127.0.0.1", port = 8080)
library(plumber)
# Create the Plumber API object
api <- plumb()  # This initializes the empty Plumber API object
setwd("C:/Users/YourUsername/Documents/R_Scripts")
getwd()
source("flights_api.R")
list.files()  # This will list all files in the current directory
source("flights_api.R")
# Load the plumber library
library(plumber)
# Specify the correct path to the R script with Plumber routes
api <- plumb("flights_api.R")
source("flights_api.R")
library(Plumber)
library(plumber)
setwd("C:/Users/s/Documents/flights_api_project")
source("flights_api.R")
setwd("C:/Users/s/Documents/flights_api_project")
setwd("C:\\Users\\s\\Documents\\flights_api_project")
setwd("C:/Users/s")
setwd("C:/Users/s/flights_api_project")
setwd("C:/Users/s/flights_api_project")
getwd()
setwd("C:/Users/s/Desktop/flights_api_project")
source("flights_server.R")
install.packages("plumber")
q()
